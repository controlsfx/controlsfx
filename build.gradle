ext.java9Args = [
        // For various usages of TraversalEngine
        "--add-exports=javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls",
        "--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls",
        // For various behaviors across controls
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls",
        // For ReadOnlyUnbackedObservableList across files
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls",
        // For InputMap used in behavior classes
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls",
        // For EventHandlerManager in AutoCompletionBinding
        "--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls",
        // For MappingChange, NonIterableChange across files
        "--add-exports=javafx.base/com.sun.javafx.collections=org.controlsfx.controls",
        //For SpreadsheetView
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior.TableViewBehavior=org.controlsfx.controls",
        //For SpreadsheetView
        "--add-exports=javafx.base/com.sun.javafx.event.EventHandlerManager=org.controlsfx.controls"
]

ext.java9RuntimeArgs = [
        // For accessing getChildren in ImplUtils
        "--add-opens=javafx.graphics/javafx.scene=org.controlsfx.controls"
]

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'org.openjfx.javafxplugin'
    apply from  : '../mavenPublish.gradle'

    sourceCompatibility = '11'
    targetCompatibility = '11'
    
    repositories {
        mavenCentral()
    }

    compileJava {
        options.encoding = "UTF-8"
        options.incremental = true
    }

    javadoc {
        def javaVersion = JavaVersion.current().majorVersion
        if (JavaVersion.current().java11Compatible) {
            options.links("https://openjfx.io/javadoc/"+ javaVersion)
            options.links("https://docs.oracle.com/en/java/javase/" + javaVersion + "/docs/api")
        } else {
            options.links("https://docs.oracle.com/javase/" + javaVersion + "/docs/api")
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.java
        from sourceSets.main.resources
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        dependsOn javadoc
        from javadoc.destinationDir
        archiveClassifier = 'javadoc'
    }

    artifacts {
        archives sourceJar
        archives javadocJar
    }

    // Used in Travis
    task getVersion {
        doLast {
            println "$project.version"
        }
    }

    // Do not publish Gradle modules
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}