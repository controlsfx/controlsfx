ext.java9Args = [
        // For various usages of TraversalEngine
        "--add-exports=javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls",
        "--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls",
        // For FontAwesome Style
        "--add-exports=javafx.graphics/com.sun.javafx.css=org.controlsfx.controls",
        // For various behaviors across controls
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls",
        // For ReadOnlyUnbackedObservableList across files
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls",
        // For InputMap used in behavior classes
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls",
        // For EventHandlerManager in AutoCompletionBinding
        "--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls",
        // For MappingChange, NonIterableChange across files
        "--add-exports=javafx.base/com.sun.javafx.collections=org.controlsfx.controls",
        // For VersionInfo in VersionChecker
        "--add-exports=javafx.base/com.sun.javafx.runtime=org.controlsfx.controls",
        // For WebPage in SVGLoader
        "--add-exports=javafx.web/com.sun.webkit=org.controlsfx.controls",
        // For enabling FontAwesome
        "--add-exports=javafx.graphics/com.sun.javafx.css=org.controlsfx.controls"
]

ext.java9RuntimeArgs = [
        // For accessing VirtualFlow field from the base class in GridViewSkin
        "--add-opens=javafx.controls/javafx.scene.control.skin=org.controlsfx.controls",
        // For accessing getChildren in ImplUtils
        "--add-opens=javafx.graphics/javafx.scene=org.controlsfx.controls"
]

static String getOSName() {
    final String osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains("linux")) {
        return ("linux")
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return ("mac")
    } else if (osName.contains("windows")) {
        return ("win")
    }
    return ("")
}

ext.javafx_modules = [
        'javafx-base',
        'javafx-graphics',
        'javafx-controls',
        'javafx-media',
        'javafx-web'
]

if (JavaVersion.current().isJava11Compatible()) {
    ext.javafx_version = '11'
    ext.platform = getOSName()
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'osgi'
    apply plugin: 'maven'
    apply from  : '../mavenPublish.gradle'

    Properties cfg = new Properties()
    cfg.load(new FileInputStream("$rootDir/controlsfx-build.properties"))

    ext {
      artifact_suffix       = cfg.artifact_suffix
      specification_title   = cfg.controlsfx_specification_title  //'Java 8u20'
      specification_version = cfg.controlsfx_specification_version //'8.20.7'
      controlsfx_name       = 'controlsfx'
      fxsampler_name        = 'fxsampler'
      fxsampler_version     = cfg.fxsampler_specification_version + artifact_suffix
      fxsampler_mainClass   = 'org.controlsfx.fxsampler/fxsampler.FXSampler'
    }

    group = 'org.controlsfx'
    version = specification_version + artifact_suffix

    sourceCompatibility = '1.9'
    targetCompatibility = '1.9'

    if (JavaVersion.current().isJava11Compatible()) {
        sourceCompatibility = rootProject.javafx_version
        targetCompatibility = rootProject.javafx_version
    }

    afterEvaluate {

        repositories {
            mavenCentral()
        }

        dependencies {
            testCompile 'junit:junit:[4,)'
        }

        test {
            testLogging {
                // Show that tests are run in the command-line output
                events 'started', 'passed'
            }
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs += [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
            options.encoding = "UTF-8"
            options.incremental = true
            if ( project.name != "fxsampler" ) {
                options.compilerArgs += java9Args
            }
        }

        javadoc {
            inputs.property("moduleName", moduleName)
            doFirst {
                exclude '**/module-info.java'
                exclude 'impl/*'
                options.addStringOption('-module-path', classpath.asPath)
                options.addStringOption('-class-path', "")
                options.addBooleanOption('html5', true)
                options.addBooleanOption('javafx', true)
                options.addBooleanOption('Xdoclint:none', true)
                options.encoding = 'UTF-8'
                javafx_modules.stream()
                    .map { module -> module.replace("-", ".") }
                    .each {
                        options.addStringOption('-add-modules', it)
                }
                // TODO: Uncomment once Javadoc link is fixed for JDK 11
                /*if (JavaVersion.current().java11Compatible) {
                    options.links("https://openjfx.io/javadoc/11")
                    options.links("https://docs.oracle.com/en/java/javase/11/docs/api")
                } else {*/
                options.links("https://docs.oracle.com/javase/9/docs/api")
                // }
                // Only required JDK 9/10
                options.addMultilineStringsOption("-add-exports").setValue(
                    [
                        'javafx.base/com.sun.javafx.event=ALL-UNNAMED',
                        'javafx.web/com.sun.webkit=ALL-UNNAMED',
                        'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED'
                    ]
                )
            }
            // The following can be removed once we start building with 12
            // https://bugs.openjdk.java.net/browse/JDK-8212233
            failOnError false
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.java
        from sourceSets.main.resources
        classifier = 'sources'
    }

    task javadocJar(type: Jar) {
        dependsOn javadoc
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    artifacts {
        archives sourceJar
        archives javadocJar
    }

}